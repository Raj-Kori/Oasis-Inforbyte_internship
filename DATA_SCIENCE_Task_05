import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Generate synthetic data for demonstration
np.random.seed(0)
num_samples = 1000
advertising_cost = np.random.normal(500, 100, num_samples)
segment = np.random.choice(['Segment A', 'Segment B', 'Segment C'], num_samples)
platform = np.random.choice(['Platform X', 'Platform Y', 'Platform Z'], num_samples)
sales = 1000 + 10 * advertising_cost - 5 * (segment == 'Segment B') + 20 * (platform == 'Platform Z') + np.random.normal(0, 50, num_samples)

# Create DataFrame
data = pd.DataFrame({'Advertising Cost': advertising_cost,
                     'Segment': segment,
                     'Platform': platform,
                     'Sales': sales})

# Encode categorical variables
data = pd.get_dummies(data, columns=['Segment', 'Platform'], drop_first=True)

# Split dataset into training and testing sets
X = data.drop('Sales', axis=1)
y = data['Sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Evaluate the model
train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
r2_train = r2_score(y_train, y_pred_train)
r2_test = r2_score(y_test, y_pred_test)

print("Training RMSE:", train_rmse)
print("Testing RMSE:", test_rmse)
print("Training R^2 score:", r2_train)
print("Testing R^2 score:", r2_test)
